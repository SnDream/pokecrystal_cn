STATIC_ASSERT "A" == $80, "Error CHARMAP A != $80"
STATIC_ASSERT "." == $e8, "Error CHARMAP . != $e8"
STATIC_ASSERT "9" == $ff, "Error CHARMAP 9 != $ff"


; DFS 编码格式

; XXHHHHHH LLLLLLLL
; 目前 DFS 编码编入所有 GB2312 字符，跳过空字符与自定义分区
; 高字节从 $01 开始，跳过已定义控制符的编码，直到 $2F （目前实际分配到$2E）
; 低字节从 $01 开始，跳过已定义控制符的编码，直到 $FC
; 低字节跳过的编码实际在本地可以正常使用，留空

; DFS 编码衍生
; 基于上述编码，在实际使用时不同的编码格式，用于区分：

; 原始编码
; 00HHHHHH LLLLLLLL
; 基本上用于表述汉字本身
; 两个字节表示一个汉字，或四个字节表示两个汉字
; 最高两位始终为0

; 缓存块编码
; CCHHHHHH LLLLLLLL CCHHHHHH LLLLLLLL (汉字片)
; 00000000 EEEEEEEE 00000000 EEEEEEEE (英文)
; 11111111 XXXXXXXX XXXXXXXX XXXXXXXX (未命中)
; 用于表述一个缓存块
; 缓存块中存储两个 4*12 的汉字片，或者两个 8*8 的英文
; CC: 编码汉字对应的片 00为左片 01为中片 10为右片
; EE: 英文编码，由于 CCHHHHHH 始终不为 0 ，因此为 0 时代表英文
; 在破坏缓存块时，CCHHHHHH 填写 $FF ，保证中英文均无法命中缓存块

; 菜单栈编码
; CCHHHHHH LLLLLLLL ICHHHHHH LLLLLLLL (汉字片)
; 00000000 EEEEEEEE I0000000 EEEEEEEE (英文)
; 11111111 TTTTTTTT XXXXXXXX AAAAAAAA (普通图块)
; 用于表述菜单栈中的数据
; 可以存储三种类型的数据
; 对于原始的普通图块，最高位用 $FF 表示
; TT: 图块号 (VRAM0/Tilemap 中的值)
; AA: 属性值 (VRAM1/Attrmap 中的值)
; 对于英文，最高位用 $00 表示
; I : 为0时表示用前一个英文值，为1时表示用后一个英文值
; 对于汉字片，与缓存块有不同
; CC: 编码汉字对应的片 00为左片 01为中片 10为右片
; 由于字节数量有限，原先缓存块中两个 CC 缩减为一个 CC
; 后一个 C 依然保留，便于恢复，被 I 占用的C由计算还原
; 前一个 CC 定义不变，后一个 CC 将默认视为前一个 CC 的下一个值
; I : 为0时表示恢复汉字片上半部分的图块，为1时为下半部分
; 另外，对于英文与汉字，恢复时 AA 都填写为色板7的值

; 编码定义
DEF DFS_CODE_NULL               EQU $00
DEF DFS_CODE_DOUBLE_0           EQU $01
DEF DFS_CODE_CONTRL_0           EQU $14
DEF DFS_CODE_DOUBLE_1           EQU $18
DEF DFS_CODE_CONTRL_1           EQU $20
DEF DFS_CODE_DOUBLE_2           EQU $28
DEF DFS_CODE_CONTRL_2           EQU $2F
DEF DFS_CODE_SINGLE_STA_0       EQU $60
DEF DFS_CODE_SINGLE_DYN_0       EQU "A" ; $80
DEF DFS_CODE_SINGLE_STA_1       EQU "." ; $e8
DEF DFS_CODE_END                EQU "9" ; $ff

DEF DFS_CODE_DOUBLE_0_END       EQU DFS_CODE_CONTRL_0     - 1
DEF DFS_CODE_CONTRL_0_END       EQU DFS_CODE_DOUBLE_1     - 1
DEF DFS_CODE_DOUBLE_1_END       EQU DFS_CODE_CONTRL_1     - 1
DEF DFS_CODE_CONTRL_1_END       EQU DFS_CODE_DOUBLE_2     - 1
DEF DFS_CODE_DOUBLE_2_END       EQU DFS_CODE_CONTRL_2     - 1
DEF DFS_CODE_CONTRL_2_END       EQU DFS_CODE_SINGLE_STA_0 - 1
DEF DFS_CODE_SINGLE_STA_0_END   EQU DFS_CODE_SINGLE_DYN_0 - 1
DEF DFS_CODE_SINGLE_DYN_0_END   EQU DFS_CODE_SINGLE_STA_1 - 1
DEF DFS_CODE_SINGLE_STA_1_END   EQU DFS_CODE_END

DEF DFS_CODE_L_NULL             EQU $00
DEF DFS_CODE_L_DOUBLE_0         EQU $01
DEF DFS_CODE_L_CONTRL_0         EQU $14
DEF DFS_CODE_L_DOUBLE_1         EQU $17
DEF DFS_CODE_L_CONTRL_1         EQU $22
DEF DFS_CODE_L_DOUBLE_2         EQU $23
DEF DFS_CODE_L_CONTRL_2         EQU $3F
DEF DFS_CODE_L_DOUBLE_3         EQU $40
DEF DFS_CODE_L_CONTRL_3         EQU $4B
DEF DFS_CODE_L_DOUBLE_4         EQU $60
DEF DFS_CODE_L_CONTRL_4         EQU $FD
DEF DFS_CODE_L_END              EQU $FF

DEF DFS_CODE_L_DOUBLE_0_END     EQU DFS_CODE_L_CONTRL_0   - 1
DEF DFS_CODE_L_CONTRL_0_END     EQU DFS_CODE_L_DOUBLE_1   - 1
DEF DFS_CODE_L_DOUBLE_1_END     EQU DFS_CODE_L_CONTRL_1   - 1
DEF DFS_CODE_L_CONTRL_1_END     EQU DFS_CODE_L_DOUBLE_2   - 1
DEF DFS_CODE_L_DOUBLE_2_END     EQU DFS_CODE_L_CONTRL_2   - 1
DEF DFS_CODE_L_CONTRL_2_END     EQU DFS_CODE_L_DOUBLE_3   - 1
DEF DFS_CODE_L_DOUBLE_3_END     EQU DFS_CODE_L_CONTRL_3   - 1
DEF DFS_CODE_L_CONTRL_3_END     EQU DFS_CODE_L_DOUBLE_4   - 1
DEF DFS_CODE_L_DOUBLE_4_END     EQU DFS_CODE_L_CONTRL_4   - 1
DEF DFS_CODE_L_CONTRL_4_END     EQU DFS_CODE_L_END

DEF DFS_TILENO_VRAM0_START EQU DFS_CODE_SINGLE_DYN_0
DEF DFS_TILENO_VRAM0_END   EQU DFS_CODE_SINGLE_DYN_0_END
DEF DFS_TILENO_VRAM1_START EQU DFS_CODE_SINGLE_DYN_0
DEF DFS_TILENO_VRAM1_END   EQU DFS_CODE_SINGLE_STA_1_END

DEF DFS_CACHE_NUM_VRAM0 EQU ( DFS_TILENO_VRAM0_END + 1 - DFS_TILENO_VRAM0_START ) / 2 ; $34
DEF DFS_CACHE_NUM_VRAM1 EQU ( DFS_TILENO_VRAM1_END + 1 - DFS_TILENO_VRAM1_START ) / 2 ; $40
DEF DFS_CACHE_NUM       EQU DFS_CACHE_NUM_VRAM0 + DFS_CACHE_NUM_VRAM1                 ; $74

STATIC_ASSERT DFS_CACHE_NUM == $74, "Error DFS_CACHE_NUM != $74"

; DFS 大小，一个汉字由两个字节编码
DEF DFS_CODE_SIZE EQU 2
; DFS 缓存块大小，包含两个汉字编码
DEF DFS_CACHE_SIZE EQU DFS_CODE_SIZE * 2

; DFS 字体大小

; 4px单片字体原始大小，应该为6
DEF DFS_RAW_4FONT_SIZE EQU 4 * 12 / 8
; 8px字体大小，由两片4px合并，并扩展为GB格式
DEF DFS_8FONT_SIZE     EQU 2 * LEN_2BPP_TILE

; DFS掩模

; 破坏缓存块使用的值
; 汉字块不存在 HHHHHH 为全 1 的场合，英文块使用全 0
DEF DFS_MASK_CLEAR  EQU %11111111
; 汉字高位编码掩模
DEF DFS_MASK_DOUBLE EQU %00111111

; DFS限制VRAM范围
	const_def
	const DFS_VRAM_LIMIT_VRAM0_BIT
	const DFS_VRAM_LIMIT_VRAM1_BIT
	const DFS_VRAM_LIMIT_NOATTR_BIT

DEF DFS_VRAM_LIMIT_NOLIMIT EQU %00000000
DEF DFS_VRAM_LIMIT_VRAM0   EQU 1 << DFS_VRAM_LIMIT_VRAM0_BIT
DEF DFS_VRAM_LIMIT_VRAM1   EQU 1 << DFS_VRAM_LIMIT_VRAM1_BIT
DEF DFS_VRAM_LIMIT_NOATTR  EQU 1 << DFS_VRAM_LIMIT_NOATTR_BIT

; DFS字体风格
	const_def
	const DFS_FONT_STYLE_STANDARD
	const DFS_FONT_STYLE_DEX
	const DFS_FONT_STYLE_OVERWORLD
	const DFS_FONT_STYLE_EUROPE
